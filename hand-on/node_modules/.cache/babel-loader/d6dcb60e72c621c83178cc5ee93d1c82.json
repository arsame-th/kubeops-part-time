{"ast":null,"code":"console.log(process.env.NODE_ENV);\n\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {// dev code\n} else {// production code\n  }\n\nexport const getTodos = () => fetch(\"/api/todos\").then(res => res.json());\nexport const createTodo = todo => fetch(\"api/todo/create\", {\n  method: \"POST\",\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(todo)\n});\nexport const updateTodo = (todo, id) => fetch(`/api/todo/${id}`, {\n  method: \"POST\",\n  headers: {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(todo)\n});\nexport const getTodo = id => fetch(`/api/todo/${id}`).then(res => res.json());","map":{"version":3,"sources":["C:/Users/arsam/Desktop/node js lambda/src/api.js"],"names":["console","log","process","env","NODE_ENV","getTodos","fetch","then","res","json","createTodo","todo","method","headers","body","JSON","stringify","updateTodo","id","getTodo"],"mappings":"AACAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,QAAxB;;AACA,IAAI,CAACF,OAAO,CAACC,GAAR,CAAYC,QAAb,IAAyBF,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAtD,EAAqE,CACnE;AACD,CAFD,MAEO,CACL;AACD;;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAD,CAAL,CAAoBC,IAApB,CAAyBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAhC,CAAvB;AAGP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAUL,KAAK,CAAC,iBAAD,EAAoB;AAC3DM,EAAAA,MAAM,EAAE,MADmD;AAE3DC,EAAAA,OAAO,EAAE;AACP,cAAU,kBADH;AAEP,oBAAgB;AAFT,GAFkD;AAM3DC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AANqD,CAApB,CAAlC;AASP,OAAO,MAAMM,UAAU,GAAG,CAACN,IAAD,EAAOO,EAAP,KAAcZ,KAAK,CAAE,aAAYY,EAAG,EAAjB,EAAoB;AAC/DN,EAAAA,MAAM,EAAE,MADuD;AAE/DC,EAAAA,OAAO,EAAE;AACP,cAAU,kBADH;AAEP,oBAAgB;AAFT,GAFsD;AAM/DC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AANyD,CAApB,CAAtC;AASP,OAAO,MAAMQ,OAAO,GAAID,EAAD,IAAQZ,KAAK,CAAE,aAAYY,EAAG,EAAjB,CAAL,CAAyBX,IAAzB,CAA8BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAArC,CAAxB","sourcesContent":["\r\nconsole.log(process.env.NODE_ENV)\r\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n  // dev code\r\n} else {\r\n  // production code\r\n}\r\n\r\nexport const getTodos = () => fetch(\"/api/todos\").then(res => res.json())\r\n\r\n\r\nexport const createTodo = (todo) => fetch(\"api/todo/create\", {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify(todo)\r\n})  \r\n\r\nexport const updateTodo = (todo, id) => fetch(`/api/todo/${id}`, {\r\n  method: \"POST\",\r\n  headers: {\r\n    \"Accept\": \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  body: JSON.stringify(todo)\r\n})  \r\n\r\nexport const getTodo = (id) => fetch(`/api/todo/${id}`).then(res => res.json())"]},"metadata":{},"sourceType":"module"}